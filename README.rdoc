This was focused on making a FAQ page friendly for anyone who wants to read it. 

Great resource for anyone who is looking at the globalize gem is to read this article http://www.sitepoint.com/go-global-rails-i18n/

The Gem's Needed to do this are 

  gem 'rails-i18n', '~> 4.0.0'
  gem 'globalize', '~> 4.0.2'

The biggest things you need to do for this are to create something with a scaffold

  EX: rails g scaffold faq question:string answer:text
  
After you do this, create a language_controller to control what language is being used

  class LanguageController < ApplicationController
    def change_locale
      l = params[:locale].to_s.strip.to_sym
      l = I18n.default_locale unless I18n.available_locales.include?(l)
      cookies.permanent[:faq_locale] = l
      redirect_to request.referer || root_url
    end
  end

This will change the langue locale that is being used. To use language locales you will need to specify what languages you are using.

Language locales are specfic in config/application

  #This is english, spanish, german and russian. To find others check out http://www.w3.org/International/O-charset-lang.html
  I18n.available_locales = [:en, :es, :de, :ru]

Now that we have set up the locales to be used we should specify our root_path and a way to reach our method that changes our language locale

  get '/change_locale/:locale', to: 'language#change_locale', as: :change_locale
  resources :faqs, only: [:index, :new, :create, :edit, :update]
  root to: 'faqs#index'
  
Now that we can change our locale we need to make sure that it gets set correctly and this is done in the application_controller

  before_action :set_locale #This is important, without it then ever language locale will overwrite the last language locale update to each post

  def set_locale
    if cookies[:faq_locale] && I18n.available_locales.include?(cookies[:faq_locale].to_sym)
      l = cookies[:faq_locale].to_sym
    else
      l = I18n.default_locale
      cookies.permanent[:faq_locale] = l
    end
    I18n.locale = l
  end

When you are done and ready to start using multiple languages you have to tell globalize what needs to be translated. This is done in the models that you care aoubt

translates :question, :answer

You then need to make a migration 
  rails g migration create_translation_for_faqs
  
Inside that migration you need to add this

  def up
    Faq.create_translation_table!({
                                          question: :string,
                                          answer: :text}, {migrate_data: true})
  end

  def down
    Faq.drop_translation_table! migrate_data: true
  end

Globalize is very specific in that they say you need to have an up and down and can't just use a change. 

These are the big changes to an application that you would have to do to support multilingual audiences

To make this look a little nice you might want to add to layouts

  <body>
  <div class="navbar navbar-default navbar-static-top">
    <div class="container">
      <div class="navbar-header">
        <%= link_to 'Frequently Asked Questions', root_path, class: 'navbar-brand' %>
      </div>

      <ul class="nav navbar-nav navbar-right">
        <li class="dropdown">
         <a class="dropdown-toggle" data-toggle="dropdown" href="#">
            <%= 'Language ' + cookies[:faq_locale] %>
            <span class="caret"></span>
          </a>
          <ul class="dropdown-menu" role="menu">
            <li>
              <%= link_to 'English', change_locale_path(:en) %>
            </li>
            <li>
              <%= link_to 'Spanish', change_locale_path(:es) %>
            </li>
            <li>
              <%= link_to 'German', change_locale_path(:de) %>
            </li>
            <li>
              <%= link_to 'Russian', change_locale_path(:ru) %>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>

  <div class="container">
    <% flash.each do |key, value| %>
        <div class="alert alert-<%= key %>">
          <%= value %>
        </div>
    <% end %>

    <div class="page-header">
      <h1><%= yield :page_header %></h1>
    </div>

    <%= yield %>
  </div>
  </body>

Then add the to the Gemfile 

gem 'bootstrap-sass'

change the app/assets/javascripts/aplications.js to look like this

  //= require jquery
  //= require jquery_ujs
  //= require turbolinks
  //= require bootstrap <--That is the line that has to be added in
  //= require_tree .

and then change the app/assets/stylsheets file application.css to application.css.scss and add this to the bottom of the file

  @import 'bootstrap';
  @import 'bootstrap/theme';
